[["index.html", "WILD6900: Reproducible Science Project Chapter 1 Introduction", " WILD6900: Reproducible Science Project Katy Gardner 2021-03-15 Chapter 1 Introduction For my final project, I will use data collected during long-term laboratory experiments I am running for my dissertation. The primary goal of my project will be to not only clean and manage the data I have already collected, but to create a system that will keep my future experiments data organized. Data collected during these experiments include: survivorship data, growth data, water chemistry, and water quality measurements. Planned analyses for these data are to use a random coefficients model to analyze growth data and some form of survivor analysis on the survivor data (to be determined which one). Overall, these experiments are designed to investigate the effects of salinity and temperature on aquatic insect growth and survival. Chapter 2 details the process of creating an RSQLite database in RMarkdown and importing all project data (mentioned above: survivorship, growth, water quality and water chemistry) into this database. "],["database.html", "Chapter 2 Building my SQLite database 2.1 Creating the database connection 2.2 Load in .csv data 2.3 Write a table into the database", " Chapter 2 Building my SQLite database #load packages library(DBI) library(RSQLite) library(dplyr) library(tidyverse) library(lessR) library(tibble) For my project, I have 4 main .csv files that I want to incorporate into one database. The files pertain to two main entities: the tanks and the bugs. Tanks contain bugs in certain treatment conditions (temperature and added sulfate). There are 3 sampling processes going on: tanks, bugs, and chemical analyses. Chemical analyses are conducted prior to the start of the experiment and at the end of the experiment. Tanks are measured approximately twice a week (with some variability) for dissolved oxygen, conductivity, and temperature levels as a sort of maintenance measurement. The number of bugs alive per tank is measured once a week and recorded as that tanks survival. Finally, bugs are measured once every two weeks for head capsule width, which can then be converted to a specific growth measurement. The database structure I intend to follow is displayed below. Figure 2.1: Database structure. Italics denote primary key, bold denotes foreign keys. 2.1 Creating the database connection First, I will create a database connection in the project folder of my Reproducible Science class folder. #establish a database connection ptery_sulf_db &lt;- dbConnect(drv = RSQLite::SQLite(), &quot;../../project/ptery_sulf.db&quot;) 2.2 Load in .csv data Next, I want to load in all of the .csv files I intend to add to the database. Ill start with USUAL water measurement data. USUAL_start &lt;- read.csv(&quot;../../../../Research/experiments/sulfate/pteronarcys/raw_data/2020-07_USUAL_results.csv&quot;) USUAL_end &lt;- read.csv(&quot;../../../../Research/experiments/sulfate/pteronarcys/raw_data/2021-01_USUAL_results.csv&quot;) #original USUAL docs had &quot;&lt;&quot; when measurement values were below detection limits (typically &lt;0.001) #I replaced &quot;&lt;&quot; with empty cells for R purposes. Not sure if empty/blank cells are more appropriate than 0&#39;s? We want to combine these two USUAL .csv files into one for the database. Some cleaning needs to be done before merging the two files. Additionally, carbonate and bicarbonate were only measured in the second round of tests (end), so these columns will need to be added to the first document. USUAL_start &lt;- USUAL_start %&gt;% rename(USU_ID = ï..USU_ID, Sulfate = Sulfate.Sulfur, arsenic = As) #renaming columns that imported into R poorly USUAL_start &lt;- USUAL_start[1:37, ] #deleting empty rows that were for some reason included in the csv import USUAL_start &lt;- add_column(USUAL_start, date = rep(as.Date(&quot;2020-07-27&quot;),37), .after = 1) #add in date of water sample to differentiate between start and end USUAL_end &lt;- USUAL_end %&gt;% rename(USU_ID = ï..USU_ID, Sulfate = Sulfate.Sulfur, arsenic = As, #for some reason RSQLite won&#39;t create table with this column name as As carbonate = Carbonate_mmolc.L, bicarbonate = Bicarbonate_mmolc.L) #the &quot;.&quot; in the original name not SQL friendly USUAL_end &lt;- USUAL_end[1:36, ] #USUAL_end has one fewer rows because we did not test the well water a second time USUAL_end &lt;- add_column(USUAL_end, date = rep(as.Date(&quot;2021-01-07&quot;),36), .after = 1) empty_cols &lt;- c(&quot;carbonate&quot;, &quot;bicarbonate&quot;) #adding empty columns before vertically merging USUAL_start[, empty_cols] &lt;- NA #merge files vertically usual &lt;- Merge(USUAL_start, USUAL_end, by=&quot;rows&quot;) 2.3 Write a table into the database Lets add the USUAL dataframe into our database. #write table in database dbExecute(ptery_sulf_db, &quot;CREATE TABLE usual ( USU_ID float NOT NULL PRIMARY KEY, date text, Trough integer, Tank integer, Chloride float, Al float, arsenic float, B float, Ba float, Ca float, Cd float, Co float, Cr float, Cu float, Fe float, K float, Mg float, Mn float, Mo float, Na float, Ni float, P float, Pb float, S float, Se float, Si float, Sr float, Zn float, Sulfate float, carbonate float, bicarbonate float);&quot;) dbWriteTable(ptery_sulf_db, &quot;usual&quot;, usual, append = TRUE) dbListTables(ptery_sulf_db) With the table added, lets check to see that it worked before moving on to the other 3 tables. dbGetQuery(ptery_sulf_db, &quot;SELECT * FROM usual LIMIT 10;&quot;) ## USU_ID date Trough Tank Chloride Al arsenic B Ba Ca Cd Co ## 1 2333 18470.0 1 1 3.42 NA 0.006 0.004 NA 6.29 NA NA ## 2 2334 18470.0 1 2 2.37 NA 0.005 0.004 NA 104.00 NA 0.001 ## 3 2335 18470.0 1 3 2.68 NA 0.004 0.005 NA 242.00 NA 0.001 ## 4 2336 18470.0 1 4 2.40 NA NA 0.003 NA 54.80 NA NA ## 5 2337 18470.0 1 5 2.45 NA 0.003 0.004 NA 195.00 NA 0.001 ## 6 2338 18470.0 1 6 2.57 NA 0.002 0.003 NA 151.00 NA NA ## 7 2339 18470.0 2 7 2.36 NA 0.004 0.004 NA 148.00 NA NA ## 8 2340 18470.0 2 8 2.42 NA 0.006 0.002 NA 56.10 NA NA ## 9 2341 18470.0 2 9 2.38 NA 0.004 0.002 NA 6.70 NA NA ## 10 2342 18470.0 2 10 2.33 NA 0.002 0.004 NA 101.00 NA 0.001 ## Cr Cu Fe K Mg Mn Mo Na Ni P Pb S Se Si Sr ## 1 NA 0.003 NA 0.17 2.13 NA NA 0.93 NA NA 0.001 0.61 NA 0.76 0.02 ## 2 NA 0.002 NA 0.18 44.10 NA NA 0.88 NA NA NA 138.00 NA 0.86 0.03 ## 3 NA NA NA 0.30 105.00 0.002 NA 0.89 NA NA NA 338.00 NA 0.82 0.06 ## 4 NA 0.001 0 0.22 23.00 NA NA 0.84 NA NA 0.001 69.10 NA 0.80 0.03 ## 5 0.001 NA NA 0.14 83.40 NA NA 0.77 NA NA NA 268.00 NA 0.75 0.05 ## 6 NA 0.003 NA 0.32 64.10 NA NA 0.99 NA NA 0.002 204.00 NA 0.84 0.04 ## 7 NA 0.003 NA 0.11 63.40 NA NA 0.91 0.001 NA NA 202.00 NA 0.88 0.05 ## 8 NA 0.002 NA 0.13 23.20 NA NA 0.92 0.001 NA 0.002 69.70 NA 0.97 0.03 ## 9 NA 0.001 NA 0.11 2.20 NA NA 0.85 0.002 NA NA 1.05 NA 0.76 0.02 ## 10 NA 0.004 NA 0.12 42.40 NA NA 0.94 NA NA NA 134.00 NA 0.81 0.04 ## Zn Sulfate carbonate bicarbonate ## 1 0.01 1.83 NA NA ## 2 0.02 413.00 NA NA ## 3 0.01 1013.00 NA NA ## 4 0.01 207.00 NA NA ## 5 0.01 803.00 NA NA ## 6 0.02 613.00 NA NA ## 7 0.02 607.00 NA NA ## 8 0.02 209.00 NA NA ## 9 0.01 3.16 NA NA ## 10 0.02 403.00 NA NA Sweet! It worked! Adding the other .csv files below. survival.wide &lt;- read.csv(&quot;../../../../Research/experiments/sulfate/pteronarcys/raw_data/weekly_survival.csv&quot;) #this file is in wide form, let&#39;s switch it to a more r-friendly long-form survival &lt;- gather(survival.wide, sdate, survival, na.rm = F, X28.Jul:X28.Dec) survival$Sulfate.mg.L &lt;- as.character(survival$Sulfate.mg.L) survival &lt;- survival %&gt;% mutate(sdate2 = dplyr::recode(sdate, # note use of dplyr:: X28.Jul = &quot;2020-07-28&quot;, X3.Aug = &quot;2020-08-03&quot;, X10.Aug = &quot;2020-08-10&quot;, X17.Aug = &quot;2020-08-17&quot;, X24.Aug = &quot;2020-08-24&quot;, X31.Aug = &quot;2020-08-31&quot;, X8.Sep = &quot;2020-09-08&quot;, X14.Sep = &quot;2020-09-14&quot;, X21.Sep = &quot;2020-09-21&quot;, X28.Sep = &quot;2020-09-28&quot;, X5.Oct = &quot;2020-10-05&quot;, X12.Oct = &quot;2020-10-12&quot;, X19.Oct = &quot;2020-10-19&quot;, X26.Oct = &quot;2020-10-26&quot;, X2.Nov = &quot;2020-11-02&quot;, X9.Nov = &quot;2020-11-09&quot;, X16.Nov = &quot;2020-11-16&quot;, X23.Nov = &quot;2020-11-23&quot;, X30.Nov = &quot;2020-11-30&quot;, X7.Dec = &quot;2020-12-07&quot;, X14.Dec = &quot;2020-12-14&quot;, X21.Dec = &quot;2020-12-21&quot;, X28.Dec = &quot;2020-12-28&quot;)) with(survival, table(sdate2, sdate)) # a check to make sure therer are 36 values at each old date and recoded date ## sdate ## sdate2 X10.Aug X12.Oct X14.Dec X14.Sep X16.Nov X17.Aug X19.Oct X2.Nov ## 2020-07-28 0 0 0 0 0 0 0 0 ## 2020-08-03 0 0 0 0 0 0 0 0 ## 2020-08-10 36 0 0 0 0 0 0 0 ## 2020-08-17 0 0 0 0 0 36 0 0 ## 2020-08-24 0 0 0 0 0 0 0 0 ## 2020-08-31 0 0 0 0 0 0 0 0 ## 2020-09-08 0 0 0 0 0 0 0 0 ## 2020-09-14 0 0 0 36 0 0 0 0 ## 2020-09-21 0 0 0 0 0 0 0 0 ## 2020-09-28 0 0 0 0 0 0 0 0 ## 2020-10-05 0 0 0 0 0 0 0 0 ## 2020-10-12 0 36 0 0 0 0 0 0 ## 2020-10-19 0 0 0 0 0 0 36 0 ## 2020-10-26 0 0 0 0 0 0 0 0 ## 2020-11-02 0 0 0 0 0 0 0 36 ## 2020-11-09 0 0 0 0 0 0 0 0 ## 2020-11-16 0 0 0 0 36 0 0 0 ## 2020-11-23 0 0 0 0 0 0 0 0 ## 2020-11-30 0 0 0 0 0 0 0 0 ## 2020-12-07 0 0 0 0 0 0 0 0 ## 2020-12-14 0 0 36 0 0 0 0 0 ## 2020-12-21 0 0 0 0 0 0 0 0 ## 2020-12-28 0 0 0 0 0 0 0 0 ## sdate ## sdate2 X21.Dec X21.Sep X23.Nov X24.Aug X26.Oct X28.Dec X28.Jul X28.Sep ## 2020-07-28 0 0 0 0 0 0 36 0 ## 2020-08-03 0 0 0 0 0 0 0 0 ## 2020-08-10 0 0 0 0 0 0 0 0 ## 2020-08-17 0 0 0 0 0 0 0 0 ## 2020-08-24 0 0 0 36 0 0 0 0 ## 2020-08-31 0 0 0 0 0 0 0 0 ## 2020-09-08 0 0 0 0 0 0 0 0 ## 2020-09-14 0 0 0 0 0 0 0 0 ## 2020-09-21 0 36 0 0 0 0 0 0 ## 2020-09-28 0 0 0 0 0 0 0 36 ## 2020-10-05 0 0 0 0 0 0 0 0 ## 2020-10-12 0 0 0 0 0 0 0 0 ## 2020-10-19 0 0 0 0 0 0 0 0 ## 2020-10-26 0 0 0 0 36 0 0 0 ## 2020-11-02 0 0 0 0 0 0 0 0 ## 2020-11-09 0 0 0 0 0 0 0 0 ## 2020-11-16 0 0 0 0 0 0 0 0 ## 2020-11-23 0 0 36 0 0 0 0 0 ## 2020-11-30 0 0 0 0 0 0 0 0 ## 2020-12-07 0 0 0 0 0 0 0 0 ## 2020-12-14 0 0 0 0 0 0 0 0 ## 2020-12-21 36 0 0 0 0 0 0 0 ## 2020-12-28 0 0 0 0 0 36 0 0 ## sdate ## sdate2 X3.Aug X30.Nov X31.Aug X5.Oct X7.Dec X8.Sep X9.Nov ## 2020-07-28 0 0 0 0 0 0 0 ## 2020-08-03 36 0 0 0 0 0 0 ## 2020-08-10 0 0 0 0 0 0 0 ## 2020-08-17 0 0 0 0 0 0 0 ## 2020-08-24 0 0 0 0 0 0 0 ## 2020-08-31 0 0 36 0 0 0 0 ## 2020-09-08 0 0 0 0 0 36 0 ## 2020-09-14 0 0 0 0 0 0 0 ## 2020-09-21 0 0 0 0 0 0 0 ## 2020-09-28 0 0 0 0 0 0 0 ## 2020-10-05 0 0 0 36 0 0 0 ## 2020-10-12 0 0 0 0 0 0 0 ## 2020-10-19 0 0 0 0 0 0 0 ## 2020-10-26 0 0 0 0 0 0 0 ## 2020-11-02 0 0 0 0 0 0 0 ## 2020-11-09 0 0 0 0 0 0 36 ## 2020-11-16 0 0 0 0 0 0 0 ## 2020-11-23 0 0 0 0 0 0 0 ## 2020-11-30 0 36 0 0 0 0 0 ## 2020-12-07 0 0 0 0 36 0 0 ## 2020-12-14 0 0 0 0 0 0 0 ## 2020-12-21 0 0 0 0 0 0 0 ## 2020-12-28 0 0 0 0 0 0 0 survival &lt;- survival %&gt;% rename(sulfate_trtment = Sulfate.mg.L, date = sdate2, set_temp = Temperature, tank = Tank) #renaming columns that imported into R poorly survival &lt;- survival[,c(2:4,6:7)] survival$survival_ID &lt;- 1:nrow(survival) #add a serial no. column to act as unique primary key survival &lt;- survival[, c(&quot;survival_ID&quot;, &quot;date&quot;, &quot;tank&quot;, &quot;set_temp&quot;, &quot;sulfate_trtment&quot;, &quot;survival&quot;)] #reordering columns Write the survival table into database. dbExecute(ptery_sulf_db, &quot;CREATE TABLE survival ( survival_ID integer NOT NULL PRIMARY KEY, date text, tank integer, set_temp integer, sulfate_trtment integer, survival integer, FOREIGN KEY(tank) REFERENCES usual(tank));&quot;) dbWriteTable(ptery_sulf_db, &quot;survival&quot;, survival, append = TRUE) dbListTables(ptery_sulf_db) dbGetQuery(ptery_sulf_db, &quot;SELECT * FROM survival LIMIT 10;&quot;) ## survival_ID date tank set_temp sulfate_trtment survival ## 1 1 2020-07-28 1 14 0 10 ## 2 2 2020-07-28 2 14 400 10 ## 3 3 2020-07-28 3 14 1000 10 ## 4 4 2020-07-28 4 14 200 10 ## 5 5 2020-07-28 5 14 800 10 ## 6 6 2020-07-28 6 14 600 10 ## 7 7 2020-07-28 7 22 600 10 ## 8 8 2020-07-28 8 22 200 10 ## 9 9 2020-07-28 9 22 0 10 ## 10 10 2020-07-28 10 22 400 10 Add weekly water measurement data. NOTE: This data has not all been entered yet, so this data file is really incomplete. Will need to go back and re-add to database when all data has been entered. water_meas &lt;- read.csv(&quot;../../../../Research/experiments/sulfate/pteronarcys/raw_data/weekly_water_measurements.csv&quot;) #rename some columns water_meas &lt;- water_meas %&gt;% rename(date = ï..DATE, measured_temp = TEMP..C., DO_percent = DO., DO_mgL = DO..mg.L., conductivity = CONDUCTIVITY, tank = TANK) #add a serial no. column to act as unique primary key, put it as first column water_meas &lt;- add_column(water_meas, water_ID = 1:nrow(water_meas), .after = 0) Create water_measures table in SQLite. dbExecute(ptery_sulf_db, &quot;CREATE TABLE water_measures ( water_ID integer NOT NULL PRIMARY KEY, date text, tank integer, measured_temp float, DO_percent float, DO_mgL float, conductivity integer, FOREIGN KEY(tank) REFERENCES survival(tank));&quot;) dbWriteTable(ptery_sulf_db, &quot;water_measures&quot;, water_meas, append = TRUE) dbListTables(ptery_sulf_db) dbGetQuery(ptery_sulf_db, &quot;SELECT * FROM water_measures LIMIT 10;&quot;) ## water_ID date tank measured_temp DO_percent DO_mgL conductivity ## 1 1 7/29/2020 1 15.4 77.7 7.77 60 ## 2 2 7/29/2020 2 15.4 82.6 8.26 815 ## 3 3 7/29/2020 3 15.5 82.5 8.24 1685 ## 4 4 7/29/2020 4 15.4 83.8 8.38 485 ## 5 5 7/29/2020 5 15.3 83.5 8.37 1395 ## 6 6 7/29/2020 6 14.8 84.0 8.50 1100 ## 7 7 7/29/2020 7 21.4 83.8 7.46 1165 ## 8 8 7/29/2020 8 21.3 82.2 7.38 510 ## 9 9 7/29/2020 9 21.4 83.1 7.39 70 ## 10 10 7/29/2020 10 21.5 84.6 7.47 850 Import head width data. head_width &lt;- read.csv(&quot;../../../../Research/experiments/sulfate/pteronarcys/raw_data/head-width_measurements.csv&quot;) #rename some columns head_width &lt;- head_width %&gt;% rename(meas_date = DATE, week = WEEK, observer = MEASURED_BY, bug_ID = ID, tank = TANK, head_width = HEAD_WIDTH) #add a serial no. column to act as unique primary key, put it as first column head_width &lt;- add_column(head_width, meas_ID = 1:nrow(head_width), .after = 0) #eliminate the &quot;ZOOM&quot; and &quot;MICROMETER UNITS&quot; columns (not needed for db) head_width &lt;- head_width[,c(1:4, 6:7,10)] Create head_width table in SQLite. dbExecute(ptery_sulf_db, &quot;CREATE TABLE head_width ( meas_ID integer NOT NULL PRIMARY KEY, week integer, meas_date text, observer text, tank integer, bug_ID varchar(4), head_width float, FOREIGN KEY(tank) REFERENCES survival(tank));&quot;) dbWriteTable(ptery_sulf_db, &quot;head_width&quot;, head_width, append = TRUE) dbListTables(ptery_sulf_db) dbGetQuery(ptery_sulf_db, &quot;SELECT * FROM head_width LIMIT 10;&quot;) ## meas_ID week meas_date observer tank bug_ID head_width ## 1 1 0 7/28/2020 KG 1 65F 1.67 ## 2 2 0 7/28/2020 KG 1 44F 1.91 ## 3 3 0 7/28/2020 KG 1 85D 2.11 ## 4 4 0 7/28/2020 KG 1 25A 1.93 ## 5 5 0 7/28/2020 KG 1 16E 1.93 ## 6 6 0 7/28/2020 KG 1 22B 1.49 ## 7 7 0 7/28/2020 KG 1 20G 1.82 ## 8 8 0 7/28/2020 KG 1 98D 1.69 ## 9 9 0 7/28/2020 KG 1 97A 1.96 ## 10 10 0 7/28/2020 KG 1 38D1 1.76 "]]
